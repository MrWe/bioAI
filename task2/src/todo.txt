TODO:
- Implement gene
    - Initialize valid gene [[0,0,0,0],
                             [0,0,0,0],
                             [1,1,1,1]
                            ]
        Initialize by the stupid method of: row_segments = len(image) / num_segments. Each segment is row_segments rows.
    - This genes positions corresponds to a pixel in the input image.



- Implement floodfill (used to identify segments)


- Implement NSGA-II Optimization (probably)
    - Non-dominated search
    - Crowding distance
    - Elitism
        - TODO: What is even a population
        -
1. Define Individual DONE
2. Define Population DONE
3. Create non-dominating sorting function DONE
    a. Minimize overall deviance D DONE
    b. Maximize edge value E -> Minimize instead DONE
    c. Define domination: DONE
        this.E = other.E, but this.D < other.D DONE
        -> this is dominated by other DONE
    d. Rank of a node = 1 + (amount of nodes that dominate) DONE
    e. Put nodes into tiers (fronts) DONE
    f. Accept best 2N nodes from top tiers DONE
4. Crowding distance DONE (Hopefully)
    a. Reduce children node amount to N DONE
        i. Try to add entire fronts at a time DONE
        ii. When an entire front cannot be added, sort by crowding distance DON
            - For each objective function: DONE
                1. Sort by all objective functions separately DONE
                2. Assign a large distance to best and worst solution to the objective function DONE
                3. For all other solutions: DONE
                    - Calculate crowding distance by looking at a node's two closest neighbours (in the sorted list) DONE
        iii. Add only the n best solutions resulting from the largest crowding distance DONE
5. Create offspring population of size N from parent population of size 2N
    a. Crowding Tournament Selection Operator DONE
        i. Choose two individuals i and j DONE
        ii. If one rank is better, it wins DONE
        iii. If ranks are equal, choose the one with the larger crowding distance DONE
    b. Crossover (choose our own) gg ez DONE
    c. Mutation (choose our own) gg super ez